services:
  member-service:
    container_name: member-service
    build:
      dockerfile: docker/Dockerfile-member-service
      context: ./
    image: sss/member-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://sss-database:3306/member-service-db
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "8500:8500"
    restart: always
    networks:
      - sss-network
    depends_on:
      sss-database:
        condition: service_healthy


  streaming-ad-service:
    container_name: streaming-ad-service
    build:
      dockerfile: docker/Dockerfile-streaming-ad-service
      context: ./
    image: sss/streaming-ad-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://sss-database:3306/streaming-ad-service-db
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}

    ports:
      - "8000:8000"
    restart: always
    networks:
      - sss-network

    depends_on:
      sss-database:
        condition: service_healthy

  api-gateway:
    container_name: api-gateway
    build:
      dockerfile: docker/Dockerfile-gateway-server
      context: ./
    image: sss/api-gateway
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ISSUER=${JWT_ISSUER}
    ports:
      - "8765:8765"
    restart: always
    networks:
      - sss-network

    depends_on:
      sss-database:
        condition: service_healthy


  eureka-server:
    container_name: eureka-server
    build:
      dockerfile: docker/Dockerfile-eureka-server
      context: ./
    image: sss/eureka-server
    ports:
      - "8761:8761"
    networks:
      - sss-network

    healthcheck:
      test: ["CMD", "curl", "-f", "http://eureka-server:8761/actuator/health"]
      interval: 10s
      retries: 5
      start_period: 30s

  config-server:
    container_name: config-server
    build:
      dockerfile: docker/Dockerfile-config-server
      context: ./
    image: sss/config-server
    ports:
      - "8888:8888"
    networks:
      - sss-network

    healthcheck:
      test: ["CMD", "curl", "-f", "http://config-server:8888/actuator/health"]
      interval: 10s
      retries: 3
      start_period: 5s

  sss-database:
    container_name: sss-database
    build:
      dockerfile: Dockerfile
      context: ./db
    image: sss/database
    environment:
      - MYSQL_ROOT_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - ./db/config:/etc/mysql/conf.d
      - ./db/init:/docker-entrypoint-initdb.d
    networks:
      - sss-network

    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "sss-database" ]
      interval: 10s
      retries: 5
      start_period: 30s

networks:
  sss-network:
    driver: bridge