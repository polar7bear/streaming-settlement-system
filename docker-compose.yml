services:
  member-service:
    container_name: member-service
    build:
      dockerfile: docker/Dockerfile-member-service
      context: ./
    image: sss/member-service
    environment:
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "8000:8000"
    restart: always
    networks:
      - sss-network
    depends_on:
      sss-database:
        condition: service_healthy


  streaming-ad-service:
    container_name: streaming-ad-service
    build:
      dockerfile: docker/Dockerfile-streaming-ad-service
      context: ./
    image: sss/streaming-ad-service
    environment:
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}

    ports:
      - "8100:8100"
    restart: always
    networks:
      - sss-network

    depends_on:
      sss-database:
        condition: service_healthy

  settlement-service:
    container_name: settlement-service
    build:
      dockerfile: docker/Dockerfile-settlement-service
      context: ./
    image: sss/settlement-service
    environment:
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}

    ports:
      - "8200:8200"
    restart: always
    networks:
      - sss-network

    depends_on:
      sss-database:
        condition: service_healthy


  settlement-batch-service:
    container_name: settlement-batch-service
    build:
      dockerfile: docker/Dockerfile-batch-service
      context: ./
    image: sss/settlement-batch-service
    environment:
      - SPRING_DATASOURCE_META_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - SPRING_DATASOURCE_STREAMING_AD_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - SPRING_DATASOURCE_SETTLEMENT_STATISTICS_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
    ports:
      - "8300:8300"

    networks:
      - sss-network

    restart: always

    depends_on:
      sss-database:
        condition: service_healthy
    volumes:
      - ./logs/settlement-batch-service:/logs


  api-gateway:
    container_name: api-gateway
    build:
      dockerfile: docker/Dockerfile-gateway-server
      context: ./
    image: sss/api-gateway
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ISSUER=${JWT_ISSUER}
    ports:
      - "8765:8765"
    restart: always
    networks:
      - sss-network

    depends_on:
      sss-database:
        condition: service_healthy


  eureka-server:
    container_name: eureka-server
    build:
      dockerfile: docker/Dockerfile-eureka-server
      context: ./
    image: sss/eureka-server
    ports:
      - "8761:8761"
    networks:
      - sss-network

    healthcheck:
      test: ["CMD", "curl", "-f", "http://eureka-server:8761/actuator/health"]
      interval: 10s
      retries: 5
      start_period: 30s

  config-server:
    container_name: config-server
    build:
      dockerfile: docker/Dockerfile-config-server
      context: ./
    image: sss/config-server
    ports:
      - "8888:8888"
    networks:
      - sss-network

    healthcheck:
      test: ["CMD", "curl", "-f", "http://config-server:8888/actuator/health"]
      interval: 10s
      retries: 3
      start_period: 5s

  sss-database:
    container_name: sss-database
    build:
      dockerfile: Dockerfile
      context: ./db
    image: sss/database
    environment:
      - MYSQL_ROOT_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - ./db/config:/etc/mysql/conf.d
      - ./db/init:/docker-entrypoint-initdb.d
    networks:
      - sss-network

    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "sss-database" ]
      interval: 10s
      retries: 5
      start_period: 30s

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.25
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - sss-network

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.25
    container_name: logstash
    depends_on:
      - elasticsearch
    volumes:
      - ./elk/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
    networks:
      - sss-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.25
    container_name: kibana
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - sss-network

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.25
    container_name: filebeat
    volumes:
#      - /var/lib/docker/containers:/var/lib/docker/containers:ro
#      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs:/logs:ro
      - ./elk/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
    depends_on:
      - logstash
    networks:
      - sss-network


  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - sss-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - sss-network
    depends_on:
      - prometheus

volumes:
  esdata:

networks:
  sss-network:
    driver: bridge